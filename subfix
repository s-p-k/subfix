#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Encode;
use IO::File;

sub usage { print "Usage: $0 [-h] [-c|--convert input output]\n" }


my ( $o, @c, $h, @s);
my $BOM = chr(hex "0xEF"). chr(hex "0xBB"). chr(hex "0xBF");

GetOptions(
    "o|option=s" => \$o,
    "convert=s{2}" => \@c,
    "strip=s{2}" => \@s,
    "h|help"     => \$h,
    )
or die usage;


usage() if $h;

if (@s) {
    my $input_file = $s[0];
    my $output_file = $s[1];
    my $strip_formatting = 1;
    toUtf8($input_file, $output_file, $strip_formatting);
}

if (@c) {
    my $input_file = $c[0];
    my $output_file = $c[1];
    my $strip_formatting = 0;
    toUtf8 ($input_file, $output_file, $strip_formatting);
}

sub toUtf8 {
    my $input_file = $_[0];
    my $output_file = $_[1];
    my $strip_formatting = $_[2];
    my $input_fh = IO::File->new($input_file, '<') or die "$input_file: $!";
    my $output_fh = IO::File->new($output_file, '+>:raw') or die "$output_file: $!";

    # add BOM to the beginning of file:
    # print $output_fh "$BOM";
    
    # then convert to utf-8 line after line
    while (my $line = <$input_fh>) {
        my $octets = decode("iso-8859-7", $line);
        my $uline = encode("utf-8", $octets);

        if ($strip_formatting) {
            my $new_uline = $uline;
            $new_uline =~ s/<[^>]*>//g;
            print $output_fh $new_uline;
        } else {
            print $output_fh $uline;
        }
    }

    $input_fh->close();
    $output_fh->close();
}
