#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Pod::Usage;
use Encode;
use IO::File;

my $usage_message = <<END_MESSAGE;
    Usage: $0 [option] <input file> <outputfile>
    
    options:
    -h, --help        show this message.
    -c, --convert     convert input file to output file.
    -s, --strip       like -c but remove text formatting too.

    examples:
    $0 -c iso88597.srt utf8.srt
    $0 -s iso88587.srt utf8.srt

    For more details see subfix(1) manual page.
END_MESSAGE

#sub usage { print "Usage: $0 [-h] [-c|--convert input.srt output.srt]\n" }
sub usage { print $usage_message }

my (@c, $h, @s);
my $BOM = chr(hex "0xEF"). chr(hex "0xBB"). chr(hex "0xBF");

GetOptions(
    "convert=s{2}" => \@c,
    "strip=s{2}" => \@s,
    "help" => \$h,
    )
or die usage;


usage() if $h;

if (@s) {
    toUtf8($s[0], $s[1], 1);
}

if (@c) {
    toUtf8($c[0], $c[1], 0);
}

sub toUtf8 {
    my ($input_file, $output_file, $strip_formatting) = @_;
    my $input_fh = IO::File->new($input_file, '<') or die "$input_file: $!";
    my $output_fh = IO::File->new($output_file, '+>:raw') or die "$output_file: $!";

    # add BOM to the beginning of file:
    #print $output_fh "$BOM";
    
    # then convert to utf-8 line after line
    while (my $line = <$input_fh>) {
        my $octets = decode("iso-8859-7", $line);
        my $uline = encode("utf-8", $octets);

        if ($strip_formatting) {
            my $new_uline = $uline;
            $new_uline =~ s/<[^>]*>//g;
            print $output_fh $new_uline;
        } else {
            print $output_fh $uline;
        }
    }

    $input_fh->close();
    $output_fh->close();
}
